# Importing necessary libraries
import sys
import math
import random
import pygame
from pygame.locals import *


# Initialize Pygame
pygame.init()

# Setting up some constants
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
BACKGROUND_COLOR = (0, 0, 0)
BALL_COLOR = (255, 255, 255)
BALL_RADIUS = 10
NBALLS_NUM = 100

# Setting up the display
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('Balls simulation')

# Setting up the clock
clock = pygame.time.Clock()

# Setting up the balls list
class Ball:
    """A class representing a ball."""

    def __init__(self, x, y, radius):
        """Initialize a new Ball object.

        Args:
            x (int): The ball's x coordinate.
            y (int): The ball's y coordinate.
            radius (int): The ball's radius.
        """
        self.x = x
        self.y = y
        self.radius = radius
        self.direction = (random.randint(-1, 1), random.randint(-1, 1))

    def move(self):
        """Move the ball by changing its coordinates.

        Make sure the ball stays within the screen boundaries.
        """
        self.x += self.direction[0]
        self.y += self.direction[1]

        # Keep the ball inside the screen boundaries
        self.keep_inside_screen()

    def keep_inside_screen(self):
        """Keep the ball inside the screen boundaries."""
        if self.x - self.radius < 0:
            self.x = self.radius
            self.direction = (-self.direction[0], self.direction[1])
        elif self.x + self.radius > SCREEN_WIDTH:
            self.x = SCREEN_WIDTH - self.radius
            self.direction = (-self.direction[0], self.direction[1])

        if self.y - self.radius < 0:
            self.y = self.radius
            self.direction = (self.direction[0], -self.direction[1])
        elif self.y + self.radius > SCREEN_HEIGHT:
            self.y = SCREEN_HEIGHT - self.radius
            self.direction = (self.direction[0
