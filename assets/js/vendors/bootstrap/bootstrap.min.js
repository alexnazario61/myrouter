/*!
 * Bootstrap v3.2.0 (http://getbootstrap.com)
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */

+function ($) {
    'use strict';

    // ALERT PLUGIN DEFINITION
    // =======================

    var dismiss = '[data-dismiss="alert"]'
    var Alert = function (el) {
        $(el).on('click', dismiss, this.close)
    }
    Alert.VERSION = '3.2.0'

    Alert.prototype.close = function (e) {
        var $this = $(this)
        var $parent = $this.closest('[data-alert]')

        e && e.preventDefault()

        $parent.trigger(e = $.Event('close.bs.alert'))

        if (e.isDefaultPrevented()) return

        $parent.removeClass('in')

        function removeElement() {
            $parent
                .trigger('closed.bs.alert')
                .remove()
        }

        $.support.transition && $parent.hasClass('fade') ?
            $parent
                .one('bsTransitionEnd', removeElement)
                .emulateTransitionEnd(150) :
            removeElement()
    }

    var old = $.fn.alert

    $.fn.alert = function (option) {
        return this.each(function () {
            var $this = $(this)
            var data = $this.data('bs.alert')

            if (!data) $this.data('bs.alert', (data = new Alert(this)))
            if (typeof option == 'string') data[option].call($this)
        })
    }

    $.fn.alert.Constructor = Alert

    // ALERT NO CONFLICT
    // =================

    $.fn.alert.noConflict = function () {
        $.fn.alert = old
        return this
    }

    // ALERT DATA-API
    // ==============

    $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery)

+function ($) {
    'use strict';

    // BUTTON PLUGIN DEFINITION
    // ========================

    var Button = function (el, options) {
        this.$element = $(el)
        this.options = $.extend({}, Button.DEFAULTS, options)
    }

    Button.VERSION = '3.2.0'

    Button.DEFAULTS = {
        loadingText: 'loading...'
    }

    Button.prototype.setState = function (state) {
        var d = 'disabled'
        var $el = this.$element
        var $spinner = $el.find('.spinner')
        var data = $el.data()
        var $btn = $el.is('input') ? $el : $el.find('> button')

        state = state + 'Text'

        if (data.resetText == null) $el.data('resetText', $btn.html())

        $btn.is(':disabled') || $el.is(':disabled') ?
            $btn.addClass(d) :
            $btn
                .removeClass(d)
                .html(data[state] || this.options[state])

        // reset button state after animation
        clearTimeout(this.timeout)
        this.timeout = setTimeout(function () {
            $btn.is(':visible') && $btn.html(data.resetText)
        }, 1000)

        if ('loadingText' == state) {
            $spinner.length || $btn.data('loading-text', $btn.html()).html('<span class="glyphicon glyphicon-refresh glyphicon-refresh-animate"></span>')
        }
    }

    Button.prototype.toggle = function () {
        var $parent = this.$element.closest('[data-toggle="buttons"]')

        $parent && $parent
            .find('.active')
            .removeClass('active')

        this.$element.toggleClass('active')
    }

    var old = $.fn.button

    $.fn.button = function (option) {
        return this.each(function () {
            var $this = $(this)
            var data = $this.data('bs.button')
            var options = typeof option == 'object' && option

            if (!data) $this.data('bs.button', (data = new Button(this, options)))

            if (option == 'toggle') data.toggle()
            else if (option) data.setState(option)
        })
    }

    $.fn.button.Constructor = Button

    // BUTTON NO CONFLICT
    // ==================

    $.fn.button.noConflict = function () {
        $.fn.button = old
        return this
    }

    // BUTTON DATA-API
    // ===============

    $(document)
        .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
            var $btn = $(e.target)
            if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
            Button.prototype.toggle.call($btn)
            e.preventDefault()
        })

}(jQuery)

+function ($) {
    'use strict';

    // CAROUSEL PLUGIN DEFINITION
    // ==========================

    var Carousel = function (element, options) {
        this.$element = $(element)
        this.$indicators = this.$element.find('.carousel-indicators')
        this.options = options
        this.paused =
            this.sliding =
            this.interval =
                null
        this.options.pause == 'hover' && this.$element
            .on('mouseenter', $.proxy(this.pause, this))
            .on('mouseleave', $.proxy(this.cycle, this))
