/* Masked Input plugin for jQuery
Copyright (c) 2007-2013 Josh Bush (digitalbush.com)
Licensed under the MIT license (http://digitalbush.com/projects/masked-input-plugin/#license)
Version: 1.3.1 */
(function ($) {
    // Default mask definitions
    var maskDefinitions = {
        '9': '[0-9]',
        'a': '[A-Za-z]',
        '*': '[A-Za-z0-9]'
    };

    // Default mask options
    var defaultOptions = {
        dataName: 'rawMaskFn',
        placeholder: '_'
    };

    // Main mask function
    function applyMask(input, mask, options) {
        var settings = $.extend({}, defaultOptions, options),
            definition,
            regexes = [],
            maskLength = mask.length,
            currentPosition = 0,
            buffer = new Array(maskLength),
            unmaskedValue = input.val();

        // Create regular expressions for each mask character
        for (var i = 0; i < maskLength; i++) {
            definition = maskDefinitions[mask.charAt(i)];
            regexes.push(definition ? new RegExp(definition) : mask.charAt(i));
        }

        input.data(settings.dataName, function () {
            return unmaskedValue;
        });

        input.on('focus.mask', function () {
            clearTimeout(timeout);
            var newPosition = getCaretPosition(input);
            timeout = setTimeout(function () {
                updateBuffer(newPosition);
                input.val(buffer.join(''));
                setCaretPosition(input, newPosition);
            }, 10);
        });

        input.on('blur.mask', function () {
            unmaskedValue = input.val();
            updateBuffer();
            if (unmaskedValue !== input.val()) {
                input.change();
            }
        });

        input.on('keydown.mask', handleKeyDown);
        input.on('keypress.mask', handleKeyPress);
        input.on('paste', handlePaste);

        updateBuffer();
    }

    // Helper function to get caret position
    function getCaretPosition(input) {
        if (input[0].selectionStart) {
            return input[0].selectionStart;
        } else if (document.selection && document.selection.createRange) {
            var range = document.selection.createRange();
            return -range.moveStart('character', -input.val().length);
        }
        return 0;
    }

    // Helper function to set caret position
    function setCaretPosition(input, position) {
        if (input[0].setSelectionRange) {
            input[0].setSelectionRange(position, position);
        } else if (document.selection && document.selection.createRange) {
            var range = document.selection.createRange();
            range.moveStart('character', position);
            range.moveEnd('character', 0);
            range.select();
        }
    }

    // Helper function to handle key press events
    function handleKeyPress(event) {
        var input = $(this),
            caretPosition = getCaretPosition(input),
            nextCharacter = String.fromCharCode(event.which);

        if (event.ctrlKey || event.altKey || event.metaKey || 32 > event.which || (caretPosition === 0 && nextCharacter === '0')) {
            return;
        }

        if (caretPosition > 0 && caretPosition < buffer.length) {
            if (regexes[caretPosition - 1].test(nextCharacter)) {
                updateBuffer(caretPosition - 1, nextCharacter);
                setCaretPosition(input, caretPosition);
                if (event.completed && caretPosition >= buffer.length) {
                    event.completed.call(input);
                }
            }
        }

        event.preventDefault();
    }

    // Helper function to handle key down events
    function handleKeyDown(event) {
        var input = $(this),
            caretPosition = getCaretPosition(input);

        if (event.which === 8 || event.which === 46 || (event.which === 127 && isIOS())) {
            if (caretPosition === 0) {
                return;
            }

            updateBuffer(caretPosition - 1);
            setCaretPosition(input, caretPosition - 1);
            event.preventDefault();
        } else if (event.which === 27) {
            input.val(buffer.join(''));
            setCaretPosition(input, 0);
            event.preventDefault();
        }
    }

    // Helper function to handle paste events
    function handlePaste(event) {
        var input = $(this),
            caretPosition = getCaretPosition(input);

        setTimeout(function () {
            updateBuffer(caretPosition);
            setCaretPosition(input, caretPosition);
            if (event.completed && caretPosition >= buffer.length) {
                event.completed.call(input);
            }
        }, 0);

        event.preventDefault();
    }

    // Helper function to update the buffer
    function updateBuffer(start, value) {
        if (arguments.length === 1) {
            start = 0;
            value = '';
        }

        for (var i = start; i < buffer.length; i++) {
            if (regexes[i].test(value)) {
                buffer[i] =
