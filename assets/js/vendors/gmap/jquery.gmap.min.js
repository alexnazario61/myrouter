/*
* jquery.gmap
* Version 2.1.5 2013-10-30
*
* This is a jQuery plugin for Google Maps. It provides functionality for adding markers, centering the map, and clearing markers.
*
* Homepage: http://labs.mario.ec/jquery-gmap/
* Author: Mario Estrada <me@mario.ec>
* License: MIT
*/

!function(a) { // Begin anonymous function
  a.fn.gMap = function(b, c) { // Define the gMap method for jQuery objects
    switch (b) { // Switch statement to handle different method calls
      case "addMarker": // Add a marker to the map
        return a(this).trigger("gMap.addMarker", [c.latitude, c.longitude, c.content, c.icon, c.popup]);
      case "centerAt": // Center the map at a specific location
        return a(this).trigger("gMap.centerAt", [c.latitude, c.longitude, c.zoom]);
      case "clearMarkers": // Clear all markers from the map
        return a(this).trigger("gMap.clearMarkers");
    }
    var d = a.extend({}, a.fn.gMap.defaults, b); // Merge the default options with the provided options

    return this.each(function() { // Loop through each selected element
      var b = new google.maps.Map(this); // Create a new Google Maps map object
      a(this).data("gMap.reference", b); // Store the map object as data on the element
      var c = new google.maps.Geocoder; // Create a new Google Maps geocoder object

      d.address // If an address was provided, geocode it and center the map
        ? c.geocode({address: d.address}, function(a) {
          a && a.length && b.setCenter(a[0].geometry.location)
        })
        : d.latitude && d.longitude // If latitude and longitude were provided, center the map
          ? b.setCenter(new google.maps.LatLng(d.latitude, d.longitude))
          : a.isArray(d.markers) && d.markers.length > 0 // If markers were provided, use the first one to center the map
            ? d.markers[0].address
              ? c.geocode({address: d.markers[0].address}, function(a) {
                a && a.length > 0 && b.setCenter(a[0].geometry.location)
              })
              : b.setCenter(new google.maps.LatLng(d.markers[0].latitude, d.markers[0].longitude))
            : b.setCenter(new google.maps.LatLng(34.885931, 9.84375)); // Default to a specific location if no other location data was provided

      b.setZoom(d.zoom); // Set the initial zoom level
      b.setMapTypeId(google.maps.MapTypeId[d.maptype]); // Set the initial map type

      var e = { // Create an options object for the map
        scrollwheel: d.scrollwheel,
        disableDoubleClickZoom: !d.doubleclickzoom
      };

      d.controls === !1 // If no controls were specified, disable the default UI
        ? a.extend(e, {disableDefaultUI: !0})
        : 0 !== d.controls.length && a.extend(e, d.controls, {disableDefaultUI: !0}); // If controls were specified, use them and disable the default UI

      b.setOptions(e); // Set the map options

      var f, g, h = new google.maps.Marker; // Create a marker object for use as a default icon and shadow

      f = new google.maps.MarkerImage(d.icon.image); // Create a marker image object for the default icon
      f.size = new google.maps.Size(d.icon.iconsize[0], d.icon.iconsize[1]); // Set the size of the marker image
      f.anchor = new google.maps.Point(d.icon.iconanchor[0], d.icon.iconanchor[1]); // Set the anchor point of the marker image
      h.setIcon(f); // Set the default icon for the marker object

      d.icon.shadow // If a shadow image was provided, create a marker image object for it
        ? (g = new google.maps.MarkerImage(d.icon.shadow),
          g.size = new google.maps.Size(d.icon.shadowsize[0], d.icon.shadowsize[1]),
          g.anchor = new google.maps.Point(d.icon.shadowanchor[0], d.icon.shadowanchor[1]),
          h.setShadow(g))
        : h.setShadow(h.getShadow()); // If no shadow image was provided, use the default shadow

      a(this).bind("gMap.centerAt", function(a, c, d, e) { // Bind a custom event for centering the map
        e && b.setZoom(e), // If a zoom level was provided, set it
          b.panTo(new google.maps.LatLng(parseFloat(c), parseFloat(d))) // Pan to the new location
      });

      var i = []; // Create an array for storing markers

      a(this).bind("gMap.clearMarkers", function() { // Bind a custom event for clearing markers
        for (; i[0];) i.pop().setMap(null) // Loop through the array and remove each marker from the map
      });

      var j; // Create a variable for storing an InfoWindow object

      a(this).bind("gMap.addMarker", function(a, c, e, f, g, k) { // Bind a custom event for adding markers
        var l, m, n = new google.maps.LatLng(parseFloat(c), parseFloat(e)), // Create a LatLng object for the marker
          o = new google.maps.Marker({position: n}); // Create a new marker
