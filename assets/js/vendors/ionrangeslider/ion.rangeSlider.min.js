// Ion.RangeSlider | version 1.9.1 | https://github.com/IonDen/ion.rangeSlider
(function(c, ea, $, M) {
  // Initialize the plugin count
  var aa = 0;

  // Function to check if the browser is IE
  var S = function() {
    var c = M.userAgent,
      a = /msie\s\d+/i;
    return 0 < c.search(a) && (c = a.exec(c).toString(), c = c.split(" ")[1], 9 > c) ? !0 : !1;
  };

  // Check if touch events are supported
  var X = "ontouchstart" in $ || 0 < M.msMaxTouchPoints;

  // Initialize the settings object
  var H = {
    init: function(fa) {
      // Merge the default settings with the user-provided settings
      var a = c.extend({
          min: 0,
          max: 100,
          from: null,
          to: null,
          type: "single",
          step: 1,
          prefix: "",
          postfix: "",
          maxPostfix: "",
          hasGrid: false,
          hideMinMax: false,
          hideFromTo: false,
          prettify: true,
          disable: false,
          values: null,
          onChange: null,
          onLoad: null,
          onFinish: null
        },
        fa
      ),
        e = c(this),
        n = this,
        I = false,
        g = null;

      // Check if the element already has the "isActive" data attribute
      if (!e.data("isActive")) {
        e.data("isActive", true);
        this.pluginCount = aa += 1;
        g = e.prop("value") ? e.prop("value").split(";") : [];

        // Set the initial values based on the user-provided settings and data attributes
        if ("single" === a.type) {
          if (g.length > 1) {
            a.min = parseFloat(g[0]);
            a.from = parseFloat(g[0]);
            a.max = parseFloat(g[1]);
          } else if (g.length === 1) {
            a.from = parseFloat(g[0]);
          }
        } else if ("double" === a.type) {
          if (g.length > 1) {
            a.min = parseFloat(g[0]);
            a.from = parseFloat(g[0]);
            a.max = parseFloat(g[1]);
            a.to = parseFloat(g[1]);
          } else if (g.length === 1) {
            a.from = parseFloat(g[0]);
            a.to = parseFloat(g[0]);
          }
        }

        // Set the initial values based on the data attributes
        if (!isNaN(e.data("min"))) a.min = parseFloat(e.data("min"));
        if (!isNaN(e.data("max"))) a.max = parseFloat(e.data("max"));
        if (!isNaN(e.data("from"))) a.from = parseFloat(e.data("from"));
        if (!isNaN(e.data("to"))) a.to = parseFloat(e.data("to"));
        if (!isNaN(e.data("step"))) a.step = parseFloat(e.data("step"));
        if (e.data("type")) a.type = e.data("type");
        if (e.data("prefix")) a.prefix = e.data("prefix");
        if (e.data("postfix")) a.postfix = e.data("postfix");
        if (e.data("maxpostfix")) a.maxPostfix = e.data("maxpostfix");
        if (e.data("hasgrid") !== undefined) a.hasGrid = e.data("hasgrid");
        if (e.data("hideminmax") !== undefined) a.hideMinMax = e.data("hideminmax");
        if (e.data("hidefromto") !== undefined) a.hideFromTo = e.data("hidefromto");
        if (e.data("prettify") !== undefined) a.prettify = e.data("prettify");
        if (e.data("disable") !== undefined) a.disable = e.data("disable");
        if (e.data("values")) {
          a.values = e.data("values").split(",");
          a.type = "custom";
        }

        // Set the default values if necessary
        a.min = Math.min(a.min, a.max);
        a.from = Math.min(a.from || a.min, a.to || a.max);
        a.to = Math.min(a.to || a.max, a.from || a.min);

        // Initialize the plugin
        n.options = a;
        n.initPlugin();
      }
    },
    // Other methods and properties of the plugin go here
  };

  // Add the plugin to the jQuery prototype
  $.fn.ionRangeSlider = function(m) {
    if (H[m]) return H[m].apply(this, Array.prototype.slice.call(arguments, 1));
    if (typeof m === 'object' || !m) return H.init.apply(this, arguments);
    c.error('Method ' + m + ' does not exist on jQuery.ionRangeSlider');
  };
})(window, document, jQuery, Modernizr);
