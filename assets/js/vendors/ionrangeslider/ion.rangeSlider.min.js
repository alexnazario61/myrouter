// Ion.RangeSlider | version 1.9.1 | https://github.com/IonDen/ion.rangeSlider
(function(c, ea, $, M) {
  // Initialize the plugin count
  var aa = 0;

  // Function to check if the browser is IE
  var S = function() {
    var c = M.userAgent,
      a = /msie\s\d+/i;
    return 0 < c.search(a) && (c = a.exec(c).toString(), c = c.split(" ")[1], 9 > c) ? !0 : !1;
  };

  // Check if touch events are supported
  var X = "ontouchstart" in $ || 0 < M.msMaxTouchPoints;

  // Initialize the settings object
  var H = {
    init: function(fa) {
      // Merge the default settings with the user-provided settings
      var a = c.extend({
          min: null,
          max: null,
          from: null,
          to: null,
          type: "single",
          step: null,
          prefix: "",
          postfix: "",
          maxPostfix: "",
          hasGrid: !1,
          hideMinMax: !1,
          hideFromTo: !1,
          prettify: !0,
          disable: !1,
          values: null,
          onChange: null,
          onLoad: null,
          onFinish: null
        },
        fa
      ),
        e = c(this),
        n = this,
        I = !1,
        g = null;

      // Check if the element already has the "isActive" data attribute
      if (!e.data("isActive")) {
        e.data("isActive", !0);
        this.pluginCount = aa += 1;
        e.prop("value") && (g = e.prop("value").split(";"));

        // Set the initial values based on the user-provided settings and data attributes
        if ("single" === a.type) {
          g && 1 < g.length
            ? ("number" !== typeof a.min
                ? (a.min = parseFloat(g[0]))
                : "number" !== typeof a.from && (a.from = parseFloat(g[0])),
              "number" !== typeof a.max && (a.max = parseFloat(g[1])))
            : g && 1 === g.length && "number" !== typeof a.from && (a.from = parseFloat(g[0]));
        } else if ("double" === a.type) {
          g && 1 < g.length
            ? ("number" !== typeof a.min
                ? (a.min = parseFloat(g[0]))
                : "number" !== typeof a.from && (a.from = parseFloat(g[0])),
              "number" !== typeof a.max ? (a.max = parseFloat(g[1])) : "number" !== typeof a.to && (a.to = parseFloat(g[1])));
        }

        // Set the initial values based on the data attributes
        "number" === typeof e.data("min") && (a.min = parseFloat(e.data("min")));
        "number" === typeof e.data("max") && (a.max = parseFloat(e.data("max")));
        "number" === typeof e.data("from") && (a.from = parseFloat(e.data("from")));
        "number" === typeof e.data("to") && (a.to = parseFloat(e.data("to")));
        e.data("step") && (a.step = parseFloat(e.data("step")));
        e.data("type") && (a.type = e.data("type"));
        e.data("prefix") && (a.prefix = e.data("prefix"));
        e.data("postfix") && (a.postfix = e.data("postfix"));
        e.data("maxpostfix") && (a.maxPostfix = e.data("maxpostfix"));
        e.data("hasgrid") && (a.hasGrid = e.data("hasgrid"));
        e.data("hideminmax") && (a.hideMinMax = e.data("hideminmax"));
        e.data("hidefromto") && (a.hideFromTo = e.data("hidefromto"));
        e.data("prettify") && (a.prettify = e.data("prettify"));
        e.data("disable") && (a.disable = e.data("disable"));
        e.data("values") && (a.values = e.data("values").split(","));

        // Set the default values if necessary
        a.min = N(a.min);
        a.min || 0 === a.min || (a.min = 10);
        a.max = N(a.max);
        a.max || 0 === a.max || (a.max = 100);
        "
