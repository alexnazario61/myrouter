(function ( Morris, jQuery, Raphael ) {

  Morris = Morris || {};

  Morris.EventEmitter = function () {
    function e() {}
    e.prototype.on = function (e, t) {
      return this.handlers == null && (this.handlers = {}), this.handlers[e] == null && (this.handlers[e] = []), this.handlers[e].push(t), this.handlers[e]
    };
    e.prototype.fire = function () {
      var e, t, n, r, s, o, u;
      n = arguments[0], e = 2 <= arguments.length ? i.call(arguments, 1) : [];
      if (this.handlers != null && this.handlers[n] != null) {
        o = this.handlers[n], u = [];
        for (r = 0, s = o.length; r < s; r++) t = o[r], u.push(t.apply(null, e));
        return u
      }
    };
    return e
  }();

  Morris.commas = function (e) {
    var t, n, r, i;
    return e != null ? (r = e < 0 ? "-" : "", t = Math.abs(e), n = Math.floor(t).toFixed(0), r += n.replace(/(?=(?:\d{3})+$)(?!^)/g, ","), i = t.toString(), i.length > n.length && (r += i.slice(n.length)), r) : "-"
  };

  Morris.pad2 = function (e) {
    return (e < 10 ? "0" : "") + e
  };

  Morris.Grid = function (n) {
    function r(t) {
      var n = this;
      typeof t.element == "string" ? this.el = jQuery(document.getElementById(t.element)) : this.el = jQuery(t.element);
      if (this.el == null || this.el.length === 0) throw new Error("Graph container element not found");
      this.el.css("position") == "static" && this.el.css("position", "relative");
      this.options = jQuery.extend({}, this.gridDefaults, this.defaults || {}, t), typeof this.options.units == "string" && (this.options.postUnits = t.units), this.raphael = new Raphael(this.el[0]), this.elementWidth = null, this.elementHeight = null, this.dirty = !1, this.init && this.init(), this.setData(this.options.data), this.el.bind("mousemove", function (e) {
        var t;
        return t = n.el.offset(), n.fire("hovermove", e.pageX - t.left, e.pageY - t.top)
      }), this.el.bind("mouseout", function (e) {
        return n.fire("hoverout")
      }), this.el.bind("touchstart touchmove touchend", function (e) {
        var t, r;
        return r = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0], t = n.el.offset(), n.fire("hover", r.pageX - t.left, r.pageY - t.top), r
      }), this.el.bind("click", function (e) {
        var t;
        return t = n.el.offset(), n.fire("gridclick", e.pageX - t.left, e.pageY - t.top)
      }), this.postInit && this.postInit()
    }

    r.prototype.gridDefaults = {
      dateFormat: null,
      axes: !0,
      grid: !0,
      gridLineColor: "#aaa",
      gridStrokeWidth: .5,
      gridTextColor: "#888",
      gridTextSize: 12,
      gridTextFamily: "sans-serif",
      gridTextWeight: "normal",
      hideHover: !1,
      yLabelFormat: null,
      xLabelAngle: 0,
      numLines: 5,
      padding: 25,
      parseTime: !0,
      postUnits: "",
      preUnits: "",
      ymax: "auto",
      ymin: "auto 0",
      goals: [],
      goalStrokeWidth: 1,
      goalLineColors: ["#666633", "#999966", "#cc6666", "#663333"],
      events: [],
      eventStrokeWidth: 1,
      eventLineColors: ["#005a04", "#ccffbb", "#3a5f0b", "#005502"]
    };

    r.prototype.setData = function (e, n) {
      var r, i, s, o, u, a, f, l, c, h, p, d, v, m;
      n == null && (n = !0), this.options.data = e;
      if (e == null || e.length === 0) {
        this.data = [], this.raphael.clear(), this.hover != null && this.hover.hide();
        return
      }

      d = this.cumulative ? 0 : null, v = this.cumulative ? 0 : null;
      this.options.goals.length > 0 && (u = Math.min.apply(null, this.options.goals), o = Math.max.apply(null, this.options.goals), v = v != null ? Math.min(v, u) : u, d = d != null ? Math.max(d, o) : o);
      this.data = (function () {
        var n, r, o;
        o = [];
        for (s = n = 0, r = e.length; n < r; s = ++n) f = e[s], a = {}, a.label = f[this.options.xkey], this.options.parseTime ? (a.x = Morris.
