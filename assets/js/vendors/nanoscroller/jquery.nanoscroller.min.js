/*!
 * nanoScrollerJS - v0.8.0 - (c) 2014 James Florentino; Licensed MIT
 */

// Create an anonymous function and execute it immediately
!function (a, b, c) {
    "use strict";

    // Variables and browser checks
    var d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F;
    x = {
        paneClass: "nano-pane",
        sliderClass: "nano-slider",
        contentClass: "nano-content",
        iOSNativeScrolling: !1,
        preventPageScrolling: !1,
        disableResize: !1,
        alwaysVisible: !1,
        flashDelay: 1500,
        sliderMinHeight: 20,
        sliderMaxHeight: null,
        documentContext: null,
        windowContext: null
    };
    s = "scrollbar";
    r = "scroll";
    k = "mousedown";
    l = "mousemove";
    n = "mousewheel";
    m = "mouseup";
    q = "resize";
    h = "drag";
    u = "up";
    p = "panedown";
    f = "DOMMouseScroll";
    g = "down";
    v = "wheel";
    i = "keydown";
    j = "keyup";
    t = "touchmove";
    d = function (a, b) {
        return a.el = a, a.options = b, e || (e = y()), a.$el = a(a.el), a.doc = a(a.options.documentContext || c), a.win = a(a.options.windowContext || b), a.$content = a.$el.children("." + f.contentClass), a.$content.attr("tabindex", a.options.tabIndex || 0), a.content = a.$content[0], a.options.iOSNativeScrolling && null != a.el.style.WebkitOverflowScrolling ? a.nativeScrolling() : a.generate(), a.createEvents(), a.addEvents(), a.reset()
    };

    // The main plugin constructor
    d.prototype.preventScrolling = function (a, b) {
        if (this.isActive)
            if (a.type === f) (b === g && a.originalEvent.detail > 0 || b === u && a.originalEvent.detail < 0) && a.preventDefault();
            else if (a.type === n) {
                if (!a.originalEvent || !a.originalEvent.wheelDelta) return;
                (b === g && a.originalEvent.wheelDelta < 0 || b === u && a.originalEvent.wheelDelta > 0) && a.preventDefault()
            }
    };

    d.prototype.nativeScrolling = function () {
        this.$content.css({WebkitOverflowScrolling: "touch"}), this.iOSNativeScrolling = !0, this.isActive = !0
    };

    d.prototype.updateScrollValues = function () {
        var a;
        a = this.content, this.maxScrollTop = a.scrollHeight - a.clientHeight, this.prevScrollTop = this.contentScrollTop || 0, this.contentScrollTop = a.scrollTop, this.iOSNativeScrolling || (this.maxSliderTop = this.paneHeight - this.sliderHeight, this.sliderTop = 0 === this.maxScrollTop ? 0 : this.contentScrollTop * this.maxSliderTop / this.maxScrollTop)
    };

    d.prototype.setOnScrollStyles = function () {
        var a;
        z ? (a = {}, a[C] = "translate(0, " + this.sliderTop + "px)") : a = {top: this.sliderTop}, B ? this.scrollRAF || (this.scrollRAF = B(function (b) {
            return function () {
                b.scrollRAF = null, b.slider.css(a)
            }(this)
        })) : this.slider.css(a)
    };

    d.prototype.createEvents = function () {
        this.events = {
            down: function (a) {
                return function (b) {
                    return this.isBeingDragged = !0, this.offsetY = b.pageY - this.slider.offset().top, this.pane.addClass("active"), this.doc.bind(l, this.events[h]).bind(m, this.events[u]), !1
                }(this)
            },
            drag: function (a) {
                return function (b) {
                    return this.sliderY = b.pageY - this.$el.offset().top - this.offsetY, this.scroll(), this.contentScrollTop >= this.maxScrollTop && this.prevScrollTop !== this.maxScrollTop ? this.$el.trigger("scrollend") : 0 === this.contentScrollTop && 0 !== this.prevScrollTop && this.$el.trigger("scrolltop"), !1
                }(this)
            },
            up: function (a) {
                return function () {
                    return this.isBeingDragged = !1, this.pane.removeClass("active"), this.doc.unbind(l, this.events[h]).unbind(m, this.events[u]), !1
                }(this)
            },
            resize: function (a) {
                return function () {
                    return a.reset()
                }(this)
            },
            panedown: function (a) {
                return function (b) {
                    return this.sliderY = (b.offsetY || b.originalEvent.layerY) - .5 * this.sliderHeight,
