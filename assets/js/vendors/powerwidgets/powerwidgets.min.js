/* ----------------------------------------
________| |_______
\ | PowerWidget | /
\ | Copyright Â© 2014 MyOrange | /
/ |______________________________________| \
/__________) (_________\
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
* =======================================================================
* PowerWidget is FULLY owned and LICENSED by MYORANGE INC.
* This script may NOT be RESOLD or REDISTRUBUTED under any
* circumstances.
* =======================================================================
* author: Sunny (@bootstraphunt)
* email: info@myorange.ca
*/

(function($, window, document) {
  'use strict';

  const DEFAULTS = {
    grid: '.bootstrap-grid',
    widgets: '.powerwidget',
    localStorage: true,
    deleteSettingsKey: '#deletesettingskey-options',
    settingsKeyLabel: 'Reset settings?',
    deletePositionKey: '#deletepositionkey-options',
    positionKeyLabel: 'Reset position?',
    sortable: true,
    buttonsHidden: false,
    toggleButton: true,
    toggleClass: "fa fa-chevron-circle-up | fa fa-chevron-circle-down",
    toggleSpeed: 200,
    onToggle: function() {},
    deleteButton: true,
    deleteClass: "fa fa-times-circle",
    onDelete: function(t) {
      $('#delete-widget').modal();
      $(t).addClass('deletethiswidget')
    },
    editButton: true,
    editPlaceholder: '.powerwidget-editbox',
    editClass: "fa fa-cog | fa fa-cog",
    editSpeed: 200,
    onEdit: function() {},
    fullscreenButton: true,
    fullscreenClass: "fa fa-arrows-alt | fa fa-arrows-alt",
    fullscreenDiff: 3,
    onFullscreen: function() {},
    buttonOrder: "%refresh% %delete% %edit% %fullscreen% %toggle%",
    opacity: 1,
    dragHandle: "> header",
    placeholderClass: "powerwidget-placeholder",
    indicator: true,
    indicatorTime: 600,
    ajax: true,
    timestampPlaceholder: ".powerwidget-timestamp",
    timestampFormat: "Last update: %m%/%d%/%y% %h%:%i%:%s%",
    refreshButton: true,
    refreshButtonClass: "fa fa-refresh",
    labelError: "Sorry but there was a error:",
    labelUpdated: "Last Update:",
    labelRefresh: "Refresh",
    labelDelete: "Delete widget:",
    afterLoad: function() {},
    rtl: false,
    onChange: function() {},
    onSave: function() {}
  };

  const PowerWidget = function(element, options) {
    this.options = $.extend({}, DEFAULTS, options);
    this.$element = $(element);
    this.init();
  };

  PowerWidget.prototype.init = function() {
    this._settings();
    if (!this.$element.length) {
      alert("It looks like your using a class instead of an ID, don't do that!");
    }
    if (this.options.rtl === true) {
      $('body').addClass('rtl');
    }
    $(this.options.grid).each((index, grid) => {
      if ($(grid).find(this.options.widgets).length) {
        $(grid).addClass('sortable-grid');
      }
    });
    if (this.options.localStorage && this.getKeyPosition()) {
      const n = JSON.parse(this.getKeyPosition());
      for (let r in n.grid) {
        const i = $(this.options.grid + '.sortable-grid').eq(r);
        for (let s in n.grid[r].section) {
          i.append($('#' + n.grid[r].section[s].id));
        }
      }
    }
    if (this.options.localStorage && this.getKeySettings()) {
      const o = JSON.parse(this.getKeySettings());
      for (let r in o.widget) {
        const u = $('#' + o.widget[r].id);
        if (o.widget[r].style) {
          u.addClass(o.widget[r].style).attr('data-widget-attstyle', o.widget[r].style);
        }
        if (o.widget[r].hidden == 1) {
          u.hide(1);
        } else {
          u.show(1).removeAttr('data-widget-hidden');
        }
        if (o.widget[r].collapsed == 1) {
          u.addClass('powerwidget-collapsed').children('div').hide(1);
        }
        if (u.children('header').children('h2').text() != o.widget[r].title) {
          u.children('header').children('h2').text(o.widget[r].title);
        }
      }
    }
    this._build(false);
    this._ajax(false);
    this._sortable();
    this._clickEvents();
    $(this.options.deleteSettingsKey).on('click', this, (e) => {
      if (this.options.confirmReplacer && typeof $.fn.modal === "function") {
        const r = $(this.options.confirmReplacer);
        $('#bootconfirm_confirm',
