/*! X-editable - v1.5.1 
* In-place editing with Twitter Bootstrap, jQuery UI or pure jQuery
* http://github.com/vitalets/x-editable
* Copyright (c) 2013 Vitaliy Potapov; Licensed MIT */

(function (a) {
  'use strict';

  // Constructor for editable form container
  var b = function (b, c) {
    this.options = a.extend({}, a.fn.editableform.defaults, c),
      this.$div = a(b),
      this.options.scope || (this.options.scope = this);
  };

  // Prototype for editable form container
  b.prototype = {
    constructor: b,
    initInput: function () {
      this.input = this.options.input;
      this.value = this.input.str2value(this.options.value);
      this.input.prerender();
    },
    initTemplate: function () {
      this.$form = a(a.fn.editableform.template);
    },
    initButtons: function () {
      var b = this.$form.find(".editable-buttons");
      b.append(a.fn.editableform.buttons);
      "bottom" === this.options.showbuttons && b.addClass("editable-buttons-bottom");
    },
    render: function () {
      this.$loading = a(a.fn.editableform.loading);
      this.$div.empty().append(this.$loading);
      this.initTemplate();
      this.options.showbuttons ? this.initButtons() : this.$form.find(".editable-buttons").remove();
      this.showLoading();
      this.isSaving = !1;
      this.$div.triggerHandler("rendering");
      this.initInput();
      this.$form.find("div.editable-input").append(this.input.$tpl);
      this.$div.append(this.$form);
      a.when(this.input.render()).then(a.proxy(function () {
        if (this.options.showbuttons || this.input.autosubmit()) {
          this.$form.find(".editable-cancel").click(a.proxy(this.cancel, this));
          this.error(this.input.error);
          this.$form.find(".editable-submit").attr("disabled", !0);
          this.input.$input.attr("disabled", !0);
          this.$form.submit(function (a) {
            a.preventDefault();
          });
        } else {
          this.error(null);
          this.input.$input.removeAttr("disabled");
          this.$form.find(".editable-submit").removeAttr("disabled");
        }

        var b = null === this.value || void 0 === this.value || "" === this.value ? this.options.defaultValue : this.value;
        this.input.value2input(b);
        this.$form.submit(a.proxy(this.submit, this));
      }, this));
    },
    cancel: function () {
      this.$div.triggerHandler("cancel");
    },
    showLoading: function () {
      var a, b;
      this.$form ? (a = this.$form.outerWidth(), b = this.$form.outerHeight(), a && this.$loading.width(a), b && this.$loading.height(b), this.$form.hide()) : (a = this.$loading.parent().width(), a && this.$loading.width(a));
      this.$loading.show();
    },
    showForm: function (a) {
      this.$loading.hide();
      this.$form.show();
      a !== !1 && this.input.activate();
      this.$div.triggerHandler("show");
    },
    error: function (b) {
      var c, d = this.$form.find(".control-group"),
        e = this.$form.find(".editable-error-block");
      if (b === !1) d.removeClass(a.fn.editableform.errorGroupClass), e.removeClass(a.fn.editableform.errorBlockClass).empty().hide();
      else {
        if (b) {
          c = ("<br>" + b).split("\n");
          for (var f = 0; f < c.length; f++) c[f] = a("<div>").text(c[f]).html();
          b = c.join("<br>");
        }
        d.addClass(a.fn.editableform.errorGroupClass), e.addClass(a.fn.editableform.errorBlockClass).html(b).show();
      }
    },
    submit: function (b) {
      b.stopPropagation();
      b.preventDefault();
      var c = this.input.input2value();
      return this.validate(c).then(a.proxy(function (d) {
        if ("object" === typeof d && void 0 !== d.newValue) {
          c = d.newValue;
          this.input.value2input(c);
          return "string" === typeof d.msg ? this.error(d.msg) : (d && "object" === typeof d && d.hasOwnProperty("newValue") && (c = d.newValue), this.error(!1), this.value = c, this.$div.triggerHandler("save", {
            newValue: c,
            submitValue: e,
            response: d
          }), void 0);
        } else if (d) return this.error(d), this.showForm(), void 0;
        if (!this.options.savenochange && this.input.value2str(c) == this.input.value2str(this.value)) return this.$div.triggerHandler("nochange"), void 0;
        var e = this.input.value2submit(c);
        return this.isSaving = !0,
          a.when(this.save(e)).done(a.proxy(function (a) {
            this.isSaving = !1;
            var b = null === d || void 0 === d || "" === d ? this.options.defaultValue : d;
           
