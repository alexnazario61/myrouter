// Adds a "autolink" plugin to TinyMCE
tinymce.PluginManager.add("autolink", function(editor) {

  // Regular expression pattern for matching URLs and email addresses
  var urlPattern = /^(https?:\/\/|ssh:\/\/|ftp:\/\/|file:\/|www\.|(?:mailto:)?[A-Z0-9._%+\-]+@)(.+)$/i;

  // Function to handle the "Enter" key press
  function onKeyDown(event) {
    if (event.keyCode === 13) {
      // Call the "r" function when the "Enter" key is pressed
      return r(editor);
    }
  }

  // Function to handle the "(" key press
  function onKeyPress(event) {
    if (event.keyCode === 41) {
      // Call the "t" function when the ")" key is pressed
      return t(editor);
    }
  }

  // Function to handle the "Space" key press
  function onKeyUp(event) {
    if (event.keyCode === 32) {
      // Call the "n" function when the "Space" key is pressed
      return n(editor);
    }
  }

  // Function to handle the "AutoUrlDetect" command in Internet Explorer
  function onFocus() {
    if (!o) {
      o = true;
      try {
        // Call the "AutoUrlDetect" command with the argument "true"
        editor.execCommand("AutoUrlDetect", false, true);
      } catch (error) {
        // Ignore any errors that occur
      }
    }
  }

  // Function to insert a link for a URL
  function t(editor) {
    i(editor, -1, "(", true);
  }

  // Function to insert a link for an email address
  function n(editor) {
    i(editor, 0, "", true);
  }

  // Function to insert a link for a word
  function r(editor) {
    i(editor, -1, "", false);
  }

  // Function to insert a link for a selection
  function i(editor, offset, prefix, isEmail) {
    // Range object for the current selection
    var range = editor.selection.getRng(!0).cloneRange();

    // Set the start and end offsets for the range
    function setStart(node, offset) {
      if (0 > offset && (offset = 0), 3 === node.nodeType) {
        var length = node.data.length;
        offset > length && (offset = length);
      }
      range.setStart(node, offset);
    }

    function setEnd(node, offset) {
      if (3 !== node.nodeType || node.hasChildNodes()) {
        range.setEnd(node, offset);
      } else {
        range.setEndAfter(node);
      }
    }

    // Variables for the start and end nodes and offsets
    var startNode, endNode, startOffset, endOffset;

    // Set the start and end nodes and offsets based on the current selection
    if
