// Adds an autosave plugin to TinyMCE
tinymce.PluginManager.add("autosave", function(editor) {
  // Time settings for autosave
  function timeout(time, unit) {
    var settings = { s: 1000, m: 60000 };
    time = /^(\d+)([ms]?)$/.exec("" + (time || unit));
    return (time[2] ? settings[time[2]] : 1) * parseInt(time[1], 10);
  }

  // Check if local storage is available
  function n() {
    var timeInStorage = parseInt(localStorage.getItem(uid + "time"), 10) || 0;
    return (new Date()).getTime() - timeInStorage > f.autosave_retention
      ? (removeDraft(!1), !1)
      : !0;
  }

  // Remove draft and time from local storage
  function removeDraft(removeNow) {
    localStorage.removeItem(uid + "draft");
    localStorage.removeItem(uid + "time");
    removeNow !== !1 && editor.fire("RemoveDraft");
  }

  // Save draft to local storage
  function storeDraft() {
    localStorage.setItem(uid + "draft", editor.getContent({ format: "raw", no_events: !0 }));
    localStorage.setItem(uid + "time", (new Date()).getTime());
    editor.fire("StoreDraft");
  }

  // Restore draft from local storage
  function restoreDraft() {
    editor.setContent(localStorage.getItem(uid + "draft"), { format: "raw" });
    editor.fire("RestoreDraft");
  }

  // Check if local storage has a draft and if the content is empty
  function hasDraft() {
    return n() && editor.isDirty()
      ? (storeDraft(), !1)
      : !0;
  }

  // Settings and local storage variables
  var uid, f = editor.settings,
    localStorage = tinymce.util.LocalStorage;
  uid = f.autosave_prefix || "tinymce-autosave-{path}{query}-{id}-";
  uid = uid.replace(/\{path\}/g, document.location.pathname);
  uid = uid.replace(/\{query\}/g, document.location.search);
  uid = uid.replace(/\{id\}/g, editor.id);
  f.autosave_interval = timeout(f.autosave_interval, "30s");
  f.autosave_retention = timeout(f.autosave_retention, "20m");

  // Adds a button and menu item for restoring draft
  function addButtonAndMenuItem() {
    var t = editor;
    t.addButton("restoredraft", {
      title: "Restore last draft",
      onclick: restoreDraft,
      onPostRender: enabled
    });
    t.addMenuItem("restoredraft", {
      text: "Restore last draft",
      onclick: restoreDraft,
      onPostRender: enabled,
      context: "file"
    });
  }

  // Enable or disable the restore draft button and menu item
  function enabled() {
    var t = editor;
    t.disabled(!n());
    t.on("StoreDraft RestoreDraft RemoveDraft", function() {
      t.disabled(!n());
    });
    setInterval(function() {
      editor.removed
