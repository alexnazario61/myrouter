tinymce.PluginManager.add('colorpicker', function (editor) {
  const onColorPickerChange = (newColor) => {
    const rgbColor = tinymce.util.Color.toRgb(newColor);
    setColorValues(rgbColor);
    updatePreview(newColor);
  };

  const updatePreview = (color) => {
    const previewEl = document.querySelector('#preview');
    previewEl.style.background = color;
  };

  const setColorValues = ({ r, g, b }) => {
    document.querySelector('#r').value = r;
    document.querySelector('#g').value = g;
    document.querySelector('#b').value = b;
    document.querySelector('#hex').value = rgbToHex(r, g, b);
  };

  const rgbToHex = (r, g, b) => {
    const hex = ((c) => c.toString(16).padStart(2, '0'))(r) +
                ((c) => c.toString(16).padStart(2, '0'))(g) +
                ((c) => c.toString(16).padStart(2, '0'))(b);
    return `#${hex}`;
  };

  editor.ui.registry.addColorFormatsPlugin('colorpicker', {
    openColorFormats: (callback) => {
      const currentColor = editor.selection.getContent({ format: 'html' });
      const win = editor.windowManager.open({
        title: 'Color',
        body: {
          type: 'panel',
          items: [
            {
              type: 'colorpicker',
              value: currentColor,
              onchange: onColorPickerChange
            },
            {
              type: 'form',
              layout: 'grid',
              columns: 4,
              items: [
                { name: 'r', label: 'R', type: 'textbox' },
                { name: 'g', label: 'G', type: 'textbox' },
                { name: 'b', label: 'B', type: 'textbox' },
                { name: 'hex', label: 'Hex', type: 'textbox' }
              ]
            }
          ]
        },
        buttons: [
          {
            type: 'cancel',
            text: 'Close'
          },
          {
            type: 'submit',
            text: 'Select',
            primary: true,
            onaction: (api) => {
              const r = parseInt(api.getForm().find('#r').value(), 10);
              const g = parseInt(api.getForm().find('#g').value(), 10);
              const b = parseInt(api.getForm().find('#b').value(), 10);
              const hex = rgbToHex(r, g, b);

              onColorPickerChange(hex);
              win.close();
            }
          }
        ],
        onSubmit: (api) => {
          const r = parseInt(api.getForm().find('#r').value(), 10);
          const g = parseInt(api.getForm().find('#g').value(), 10);
          const b = parseInt(api.getForm().find('#b').value(), 10);
          const hex = rgbToHex(r, g, b);

          callback(hex);
        }
      });
    }
  });
});
``
