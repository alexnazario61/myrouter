tinymce.PluginManager.add("contextmenu", function(editor) {
  // Variable to store the contextmenu object
  var menu, 
  
  // Check if the contextmenu should use the native one
  neverUseNative = editor.settings.contextmenu_never_use_native;

  // Event handler for the contextmenu event
  editor.on("contextmenu", function(event) {
    // Prevent the default context menu from showing up
    event.preventDefault();

    // Only execute the following code if the native context menu is not used
    if (!event.ctrlKey || neverUseNative) {
      // Get the document object
      var doc = editor.getDoc();

      // If the menu object already exists, show it
      if (menu) {
        menu.show();
      } else {
        // Create a new menu object
        var items = (editor.settings.contextmenu || "link image inserttable | cell row column deletetable").split(/[ ,]/);

        // Remove any separator items that are not at the beginning or end of the array
        for (var i = 0; i < items.length; i++) {
          if ("|" === items[i]) {
            (0 === i || i === items.length - 1) || items.splice(i, 1);
          }
        }

        // Create the menu object with the items
        menu = new tinymce.ui.Menu({
          items: items,
          context: "contextmenu",
          classes: "contextmenu"
        }).renderTo();

        // Remove the menu object when the editor is removed
        editor.on("remove", function() {
          menu.remove();
          menu = null;
        });
      }

      // Calculate the position of the menu
      var position = {
        x: event.pageX,
        y: event.pageY
      };

      // If the editor is inline, adjust the position of the menu
      if (editor.inline) {
        position = tinymce.DOM.getPos(editor.getContentAreaContainer());
       
