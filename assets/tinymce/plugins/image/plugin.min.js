tinymce.PluginManager.add('image', function (editor) {
  const getImageData = (imgElement) => {
    if (!imgElement || imgElement.nodeName.toUpperCase() !== 'IMG') {
      return {
        src: '',
        alt: '',
        title: '',
        classes: '',
        width: '',
        height: '',
        style: '',
        caption: false,
      };
    }

    return {
      src: imgElement.getAttribute('src'),
      alt: imgElement.getAttribute('alt'),
      title: imgElement.getAttribute('title'),
      classes: imgElement.getAttribute('class'),
      width: imgElement.getAttribute('width'),
      height: imgElement.getAttribute('height'),
      style: imgElement.getAttribute('style'),
      caption: imgElement.parentNode.nodeName.toUpperCase() === 'FIGURE',
    };
  };

  const openImageDialog = (imageData) => {
    const windowManager = editor.windowManager;
    const dom = editor.dom;

    const getImageList = (callback) => {
      if (typeof editor.settings.image_list === 'string') {
        tinymce.util.XHR.send({
          url: editor.settings.image_list,
          success: (response) => callback(JSON.parse(response)),
        });
      } else if ('function' === typeof editor.settings.image_list) {
        callback(editor.settings.image_list(getImageList));
      } else {
        callback([]);
      }
    };

    const getClassList = () => {
      if (editor.settings.image_class_list) {
        return editor.settings.image_class_list.map((item) => {
          return {
            text: item.text,
            value: item.value,
            textStyle: () => editor.formatter.getCssText({ inline: 'img', classes: [item.value] }),
          };
        });
      }

      return [];
    };

    const updateImage = (src, alt, title, classes, width, height, style) => {
      const updatedImage = dom.get('img[src="' + src + '"]')[0];
      if (updatedImage) {
        dom.setAttribs(updatedImage, {
          src,
          alt,
          title,
          'class': classes,
          style,
        });

        if (width) {
          dom.setAttrib(updatedImage, 'width', width);
        }

        if (height) {
          dom.setAttrib(updatedImage, 'height', height);
        }

        editor.nodeChanged();
      }
    };

    const onInsertImage = (imageData) => {
      if (!imageData.src) {
        return;
      }

      const figure = dom.create('figure', { 'class': 'image' });
      const img = dom.create('img', {
        src: imageData.src,
        alt: imageData.alt || '',
        title: imageData.title || '',
        'class': imageData.classes || '',
        style: imageData.style || '',
      });

      if (imageData.width) {
        img.setAttribute('width', imageData.width);
      }

      if (imageData.height) {
        img.setAttribute('height', imageData.height);
      }

      figure.appendChild(img);

      if (imageData.caption) {
        const caption = dom.create('figcaption', { contentEditable: true }, 'Caption');
        figure.appendChild(caption);
      }

      const parentNode = dom.getParent(editor.selection.getNode(), 'figure.image') || editor.getBody();
      dom.insertAfter(figure, parentNode);
      editor.selection.select(figure);
      editor.nodeChanged();
    };

    getImageList((imageList) => {
      const imageListControl = {
        type: 'listbox',
        label: 'Image list',
        values: imageList.map((item) => {
          return {
            text: item.text,
            value: editor.convertURL(item.value || item.url, 'src'),
          };
        }),
        value: imageData.src && editor.convertURL(imageData.src, 'src'),
        onselect: (event) => {
          const altInput = windowManager.getParams().body.find('#alt');
          if (!altInput.value() || event.control.text() === altInput.value()) {
            altInput.value(event.control.text());
          }
          windowManager.getParams().body.find('#src').value(event.control.value()).fire('change');
        },
        onPostRender: () => {
          imageListControl.value(imageData.src && editor.convertURL(imageData.src, 'src'));
        },
      };

      const controls = [
        {
          name: 'src',
          type: 'filepicker',
          filetype: 'image',
          label: 'Source',
          autofocus: true,
          onchange: (event) => {
            const src = event.target.value;
            const altInput = windowManager.getParams().body.find('#alt');
            const titleInput = windowManager.getParams().body.find('#title');
            const classesInput = windowManager.getParams().body.find('#classes');

            if (src) {
              tinymce.util.XHR.send({
                url: src,
                success: (response) => {
                  const imageData = JSON.parse(response);
                  altInput.value(imageData.alt || '');
                  titleInput.value(imageData.title || '');
                  classesInput.value(imageData.classes || '');
                },
              });
            } else {
              altInput.value('');
              titleInput.value('');
              classesInput.value('');
            }
          },
        },
        imageListControl,
        {
          name: 'alt',
         
