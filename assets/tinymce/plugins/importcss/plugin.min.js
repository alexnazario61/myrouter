// Adds a new plugin to TinyMCE's PluginManager
tinymce.PluginManager.add("importcss", function(editor) {
  // Defines a function to get the skin URL for the editor
  function getSkinUrl(editor) {
    var settings = editor.settings;
    var skin = settings.skin !== !1 ? settings.skin || "lightgray" : !1;
    if (skin) {
      var skinUrl = settings.skin_url;
      skinUrl =
        skinUrl ||
        tinymce.baseURL + "/skins/" + skin; // If skin_url is not provided, use the default skin URL
      return skinUrl + "/content" + (editor.inline ? ".inline" : "") + ".min.css";
    }
    return !1;
  }

  // Defines a function to extract selectors from a stylesheet
  function extractSelectors(stylesheet, filter) {
    var selectors = [];
    var rules = stylesheet.cssRules || stylesheet.rules;
    tinymce.each(rules, function(rule) {
      if (rule.selectorText) {
        var matches = rule.selectorText.split(",");
        tinymce.each(matches, function(match) {
          match = tinymce.trim(match);
          if (!filter || filter(match)) {
            selectors.push(match);
          }
        });
      }
    });
    return selectors;
  }

  // Defines a function to convert a selector to a format
  function selectorToFormat(selector) {
    var match = /^(?:([a-z0-9\-_]+))?(\.[a-z0-9_\-\.]+)$/i.exec(selector);
    if (match) {
      var name = match[1];
      var classes = match[2].substr(1).split(".").join(" ");
      var inline = tinymce.makeMap("a,img");
      if (name) {
        return {
          title: selector,
          block: editor.schema.getTextBlockElements()[name]
            ? name
            : editor.schema.getBlockElements()[name] || inline[name.toLowerCase()]
            ? name
            : null,
        };
      } else if (classes) {
        return {
          inline: "span",
          title: selector.substr(1),
          classes: classes,
        };
      }
    }
    return null;
  }

  // Defines a function to handle the "renderFormatsMenu" event
  function handleRenderFormatsMenu(event) {
    var settings = editor.settings;
    var groups = settings.importcss_groups;
    var filter = settings.importcss_selector_filter;
    var converter = settings.importcss_selector_converter || selectorToFormat;
    var selectors = extractSelectors(event.doc.styleSheets, filter);
    var items = [];

    tinymce.each(groups, function(group) {
      group = tinymce.extend({}, group);
      group.filter = filter || function(selector) {
        return true;
      };
      tinymce.each(selectors, function(selector) {
        if (!group.filter || group.filter(selector)) {
          var format = converter(selector);
          if (format) {
            var item = {
              text: format.title,
              format: format.block || format.inline,
            };
            if (format
