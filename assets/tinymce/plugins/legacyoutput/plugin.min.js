!function(e){ // Define an anonymous function that takes the TinyMCE object as an argument
  e.on("AddEditor", function(e){ // Listen for the "AddEditor" event and execute the following function
    e.editor.settings.inline_styles = !1; // Set the "inline_styles" setting to false
  }),
  e.PluginManager.add("legacyoutput", function(t, n, r){ // Add a new plugin with the name "legacyoutput"
    t.on("init", function(){ // Listen for the "init" event and execute the following function
      var n = "p,h1,h2,h3,h4,h5,h6,td,th,div,ul,ol,li,table,img", // Define a string of HTML tags
          r = e.explode(t.settings.font_size_style_values), // Split the "font_size_style_values" setting into an array
          i = t.schema; // Get the schema object for the editor

      t.formatter.register({ // Register a set of formatting commands
        alignleft: {selector: n, attributes: {align: "left"}},
        aligncenter: {selector: n, attributes: {align: "center"}},
        alignright: {selector: n, attributes: {align: "right"}},
        alignjustify: {selector: n, attributes: {align: "justify"}},
        bold: [{inline: "b", remove: "all"}, {inline: "strong", remove: "all"}, {inline: "span", styles: {fontWeight: "bold"}}],
        italic: [{inline: "i", remove: "all"}, {inline: "em", remove: "all"}, {inline: "span", styles: {fontStyle: "italic"}}],
        underline: [{inline: "u", remove: "all"}, {inline: "span", styles: {textDecoration: "underline"}, exact: !0}],
        strikethrough: [{inline: "strike", remove: "all"}, {inline: "span", styles: {textDecoration: "line-through"}, exact: !0}],
        fontname: {inline: "font", attributes: {face: "%value"}},
        fontsize: {inline: "font", attributes: {size: function(t){return e.inArray(r, t.value) + 1}}},
        forecolor: {inline: "font", attributes: {color: "%value"}},
        hilitecolor: {inline: "font", styles: {backgroundColor: "%value"}}
      }),
      e.each("b,i,u,strike".split(","), function(e){ // Add valid elements for certain inline styles
        i.addValidElements(e + "[*]")
      }),
      i.getElementRule("font") || i.addValidElements("font[face|size|color|style]"), // Add a rule for the "font" element
      e.each(n.split(","), function(e){ // Add an "align" attribute to certain elements
        var t = i.getElementRule(e);
        t && (t.attributes.align || (t.attributes.align = {}, t.attributesOrder.push("align")))
      })
    }),
    t.addButton("fontsizeselect", function(){ // Add a new button for selecting font size
      var e = [],
          n = t.settings.fontsize_formats || "8pt 10pt 12pt 14pt 18pt 24pt 36pt",
          r = t.settings.fontsize_formats.split(" ");

      return t.$.each(r, function(t, n){
        var r = n,
            i = n,
            o = n.split("=");

        o.length > 1 && (r = o[0], i = o[1]),
        e.push({text: r, value: i})
      }),
      {
        type: "listbox", // Use a listbox control
        text: "Font Sizes", // Button text
        tooltip: "Font Sizes", // Tooltip text
        values: e, // Listbox values
        fixedWidth: !0, // Set a fixed width for the button
        onPostRender: function(){ // Set up an event handler for the "NodeChange" event
          var e = this;
          t.on("NodeChange", function(){
            var n;
            n = t.dom.getParent(t.selection.getNode(), "font"),
            n ? e.value(n.size) : e.value("")
          })
        },
        onclick: function(e){ // Set up an event handler for the button click event
          e.control.settings.value && t.execCommand("FontSize", !1, e.control.settings.value)
        }
      }
    }),
    t.addButton("fontselect", function(){ // Add a new button for selecting font family
      function e(e){
        e = e.replace(/;$/, "").split(";");
        for (var t = e.length; t--;) e[t] = e[t].split("=");
        return e
      }
      var n = "Andale Mono=andale mono,monospace;Arial=arial,helvetica,sans-serif;Arial Black=arial black,sans-serif;Book Antiqua=book antiqua,palatino,
