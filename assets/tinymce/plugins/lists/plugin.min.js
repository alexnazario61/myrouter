tinymce.PluginManager.add('lists', function (editor) {
  const dom = editor.dom;
  const selection = editor.selection;
  const N = tinymce.DOM;
  const E = tinymce.Editor;

  // Helper functions
  function isListItem(node) {
    return node && /^(LI|DT|DD)$/.test(node.nodeName);
  }

  function isEmptyListItem(node) {
    return node && N.isEmpty(node);
  }

  function isTextBlock(node) {
    return node && !!editor.schema.getTextBlockElements()[node.nodeName];
  }

  function isBody(node) {
    return node === editor.getBody();
  }

  function getSelectedListItems() {
    return editor.grep(editor.getSelectedBlocks(), isListItem);
  }

  function getListParent(node) {
    return N.getParent(node, 'OL,UL,DL');
  }

  function renameToListItem(node, newName) {
    const parent = node.parentNode;
    const listItem = N.create(newName);
    parent.insertBefore(listItem, node);
    listItem.appendChild(node);
    return listItem;
  }

  function removeListItem(node) {
    const parent = node.parentNode;
    if (parent) {
      parent.removeChild(node);
    }
  }

  function wrapInList(node, listType) {
    const list = N.create(listType);
    editor.getBody().insertBefore(list, node);
    list.appendChild(node);
    return list;
  }

  function unwrapList(node) {
    const parent = node.parentNode;
    if (parent && parent.nodeName === 'LI') {
      const parentParent = parent.parentNode;
      if (parentParent && parentParent.nodeName === 'OL' || parentParent.nodeName === 'UL') {
        parentParent.removeChild(parent);
      }
    }
  }

  // Event handlers
  function onBeforeExecCommand(event) {
    const command = event.command.toLowerCase();
    if (command === 'indent') {
      if (increaseIndent()) {
        event.preventDefault();
      }
    } else if (command === 'outdent') {
      if (decreaseIndent()) {
        event.preventDefault();
      }
    }
  }

  function onKeyDown(event) {
    if (event.keyCode === tinymce.util.VK.TAB) {
      event.preventDefault();
      if (event.shiftKey) {
        decreaseIndent();
      } else {
        increaseIndent();
      }
    } else if (event.keyCode === tinymce.util.VK.BACKSPACE || event.keyCode === tinymce.util.VK.DELETE) {
      event.preventDefault();
      a.backspaceDelete();
    }
  }

  // Command handlers
  function insertUnorderedList() {
    wrapList(selection.getStart(), 'UL');
  }

  function insertOrderedList() {
    wrapList(selection.getStart(), 'OL');
  }

  function insertDefinitionList() {
    wrapList(selection.getStart(), 'DL');
  }

  // Indent and outdent functions
  function increaseIndent() {
    const selectedListItems = getSelectedListItems();
    if (selectedListItems.length) {
      for (let i = 0; i < selectedListItems.length; i++) {
        const listItem = selectedListItems[i];
        const parentList = getListParent(listItem);

        if (parentList && parentList.nodeName === 'LI') {
          const parentParentList = getListParent(parentList);
          if (parentParentList) {
            const newParentList = renameToListItem(parentList, parentParentList.nodeName);
            parentParentList.appendChild(newParentList);
          } else {
            const newParentList = wrapInList(parentList, 'OL' || 'UL');
            newParentList.appendChild(parentList);
          }
        } else if (parentList) {
          const newParentList = wrapInList(parentList, 'OL' || 'UL');
          newParentList.appendChild(parentList);
        }
      }
      return true;
    }
    return false;
  }

  function decreaseIndent() {
    const selectedListItems = getSelectedListItems();
    if (selectedListItems.length) {
      for (let i = 0; i < selectedListItems.length; i++) {
        const listItem = selectedListItems[i];
        const parentList = getListParent(listItem);

        if (parentList && parentList.nodeName === 'LI') {
          const parentParentList = getListParent(parentList);
          if (parentParentList) {
            const siblingListItem = parentList.previousSibling || parentList.nextSibling;
            if (siblingListItem && siblingListItem.nodeName === 'LI') {
              const newParentList = renameToListItem(parentList, parentParentList.nodeName);
              parentParentList.insertBefore(newParentList, siblingListItem);
              newParentList.appendChild(listItem);
            } else {
              unwrapList(parentList);
              parentParentList.appendChild(listItem);
            }
          } else {
            unwrapList(parentList);
          }
        } else if (parentList) {
          unwrapList(parentList);
        }
      }
      return true;
    }
    return false;
  }

  // Backspace and delete functions
  function backspaceDelete() {
    if (selection.isCollapsed()) {
      const listItem = N.getParent(selection.getStart(), 'LI');
      if (listItem) {
        const parentList = listItem.parentNode;
        if (parentList && N.isEmpty(parentList)) {
          return true;
        }

        const listParent
