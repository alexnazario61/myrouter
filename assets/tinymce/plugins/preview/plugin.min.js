// Adds a "preview" plugin to TinyMCE
tinymce.PluginManager.add("preview", function(editor) {
  // Adds a "mcePreview" command to TinyMCE
  editor.addCommand("mcePreview", function() {
    // Creates a preview window using the TinyMCE window manager
    editor.windowManager.open({
      title: "Preview",
      width: parseInt(editor.getParam("plugin_preview_width", "650"), 10),
      height: parseInt(editor.getParam("plugin_preview_height", "500"), 10),
      html: '<iframe src="javascript:\'\'" frameborder="0"' + (editor.documentBaseURI.getURI() !== "" ? ' sandbox="allow-scripts"' : "") + "></iframe>",
      buttons: [
        {
          text: "Close",
          onclick: function() {
            this.parent().parent().close();
          },
        },
      ],
      onPostRender: function() {
        var base,
          css = "",
          bodyId = editor.settings.body_id || "tinymce",
          bodyClass = editor.settings.body_class || "";
        // Adds the base tag and content CSS to the preview window
        if (bodyId.indexOf("=") !== -1) {
          bodyId = editor.getParam("body_id", "", "hash")[editor.id] || bodyId;
        }
        if (bodyClass.indexOf("=") !== -1) {
          bodyClass = editor.getParam("body_class", "", "hash")[editor.id] || bodyClass;
        }
        var directionality = editor.settings.directionality || "";
        if (editor.settings.directionality) {
          directionality = ' dir="' + editor.settings.directionality + '"';
        }
        // Generates the preview HTML
        var html =
          '<!DOCTYPE html><html><head>' +
          '<base href="' +
          editor.documentBaseURI.getURI() +
          '">' +
          tinymce.each(editor.contentCSS, function(cssUrl) {
            return '<link type="text/css" rel="stylesheet" href="' + editor.documentBaseURI.toAbsolute(
