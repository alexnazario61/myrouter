tinymce.PluginManager.add("tabfocus", function(editor) {
  // Define a function to handle key events
  function keydownHandler(event) {
    // Prevent the default behavior for certain key events
    function preventDefault(event) {
      if (
        9 !== event.keyCode ||
        event.ctrlKey ||
        event.altKey ||
        event.metaKey ||
        event.isDefaultPrevented()
      ) {
        return;
      }
      event.preventDefault();
    }

    // Function to find the next focusable element
    function findNextFocusableElement(element, direction) {
      function isFocusable(element) {
        return (
          "BODY" === element.nodeName ||
          "hidden" !== element.type &&
          "none" !== element.style.display &&
          "hidden" !== element.style.visibility &&
          isFocusable(element.parentNode)
        );
      }

      function isInputElement(element) {
        return /INPUT|TEXTAREA|BUTTON/.test(element.tagName) && 
          tinymce.get(editor.id) &&
          -1 !== element.tabIndex &&
          isFocusable(element);
      }

      const elements = editor.dom.select(
        editor.getParam("tab_focus", editor.getParam("tabfocus_elements", ":prev,:next"))
      );

      if (elements.length === 1 && (elements[1] = elements[0], elements[0] = ":prev")) {
        elements[1] = elements[0];
        elements[0] = ":prev";
      }

      const focusableElements = editor.dom.select(
        editor.shiftKey ? (elements[0] === ":prev" ? findPrevFocusable(editor, -1) : elements[0]) : (elements[1] === ":next" ? findNextFocusable(editor, 1) : elements[1])
      );

      return focusableElements.length > 0 ? focusableElements[0] : null;
    }

    let next
