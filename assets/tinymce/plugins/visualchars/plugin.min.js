tinymce.PluginManager.add('visualchars', function (editor) {
  const defaultCharClasses = {
    '\xa0': 'nbsp',
    '\xad': 'shy',
  };
  let currentState;
  let charRegex;
  let spanSelector;

  function createCharSpan(char) {
    return `<span data-mce-bogus="1" class="mce-${defaultCharClasses[char]}">${char}</span>`;
  }

  function getCharSpansRegex() {
    const charList = Object.keys(defaultCharClasses).join('');
    return new RegExp(`[${charList}]`, 'g');
  }

  function getSpanSelector() {
    let selector = '';
    for (const char in defaultCharClasses) {
      selector += `span.mce-${defaultCharClasses[char]}`;
    }
    return selector;
  }

  function replaceNodesWithChars(nodes) {
    for (let i = 0; i < nodes.length; i++) {
      const node = nodes[i];
      if (node.nodeType === 3 && node.nodeValue && charRegex.test(node.nodeValue)) {
        const chars = node.nodeValue.replace(charRegex, createCharSpan);
        const div = editor.dom.create('div', null, chars);

        for (let s = div.lastChild; s; s = editor.dom.getPrevious(s)) {
          editor.dom.insertAfter(s, node);
        }

        editor.dom.remove(node);
      }
    }
  }

  function removeCharSpans(spans) {
    for (let i = spans.length - 1; i >= 0; i--) {
      editor.dom.remove(spans[i], 1);
    }
  }

 
