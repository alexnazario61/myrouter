import org.apache.commons.lang3.RandomStringUtils;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import java.io.ByteArrayOutputStream;
import java.io.SocketTimeoutException;
import java.io.TimeoutException;
import java.util.concurrent.TimeoutException;

public class SVGConverter {

    // Logger instance for logging
    private static final Logger logger = getLogger(SVGConverter.class);

    // Constructor for SVGConverter class
    @Autowired
    public SVGConverter() {
    }

    // Method to convert SVG to other formats
    public ByteArrayOutputStream convert(String input, MimeType mime, String constructor,
                                         String globalOptions, String dataOptions, Float width, Float scale)
            throws Exception {
        // Check if the input string is not empty
        if (input == null || input.isEmpty()) {
            throw new Exception("Empty input string");
        }

        // Check if the MIME type is valid
        if (mime == null || !isValidMimeType(mime)) {
            throw new Exception("Invalid MIME type");
        }

        // Get the server instance
        Server server = Server.getInstance();

        // Check if the server is available
        if (!server.isAvailable()) {
            throw new Exception("Server is not available");
        }

        // Convert the input string to the desired format
        ByteArrayOutputStream stream = null;
        try {
            stream = requestServer(server, input, constructor, globalOptions, dataOptions, mime, width, scale);
        } catch (SocketTimeoutException e) {
            // Handle exceptions and log the error message
            String errorMessage = "Exception while returning server to pool: " + e.getMessage();
            logger.error(errorMessage);
            throw new PoolException(errorMessage);
        } catch (TimeoutException e) {
            String errorMessage = "POOL EXHAUSTED!!";
            logger.error(errorMessage);
            throw new PoolException(errorMessage);
        } catch (Exception e) {
            String errorMessage = "Error converting SVG: " + e.getMessage();
            logger.error(errorMessage);
            throw new SVGConverterException(errorMessage);
        }

        // Return the converted stream
        return stream;
    }

    // Method to request a server for conversion
    private ByteArrayOutputStream requestServer(Server server, String input, String constructor, String globalOptions,
                                               String dataOptions, MimeType mime, Float width, Float scale)
            throws Exception {

        // Request the server for conversion and handle exceptions
        ByteArrayOutputStream stream = null;
        try {
            stream = server.convert(input, constructor, globalOptions, dataOptions, mime, width, scale);
        } catch (Exception e) {
            String errorMessage = "Error converting SVG: " + e.getMessage();
            logger.error(errorMessage);
            throw new SVGConverterException(errorMessage);
        }

        // Return the server to the pool
        server.returnObject(server);

        // Return the converted stream
        return stream;
   
