import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

import org.apache.commons.pool2.ObjectFactory;
import org.apache.commons.pool2.PoolException;

public class BlockingQueuePool<T> extends AbstractPool<T> {

    private final BlockingQueue<T> queue;
    private final int maxWait;

    public BlockingQueuePool(ObjectFactory<T> factory, int maxWait) {
        super(factory);
        if (maxWait < 0) {
            throw new IllegalArgumentException("maxWait must be non-negative");
        }
        this.queue = new LinkedBlockingQueue<>();
        this.maxWait = maxWait;
    }

    @Override
    public T borrowObject() throws PoolException {
        T object;
        try {
            object = queue.poll(maxWait, TimeUnit.MILLISECONDS);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new PoolException("Interrupted while waiting for an object", e);
        }
        if (object == null && getAndDecrement() > 0) {
            throw new PoolException("Could not acquire an object");
        }
        return object;
    }

    @Override
    public void returnObject(T object, boolean valid) {
        if (valid && queue.remainingCapacity() > 0) {
            queue.offer(object);
        } else {
            destroyObject(object);
        }
    }

    @Override
    public void validate(T object, boolean valid) {
        if (!valid) {
            passivate(object);
        }
    }

    @Override
    public void destroyObject(T object) {
        // implementation specific to the object type
    }

    @Override
    public void passivate(T object) {
        if (queue.remainingCapacity() > 0) {
            queue.offer(object);
        } else {
            destroyObject(object);
        }
    }

    @Override
    protected int incrementAndGet() {
        return super.incrementAndGet();
    }

    @Override
    protected int getAndDecrement() {
        return super.getAndDecrement();
    }
}
