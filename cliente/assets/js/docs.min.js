/*!
Holder - client side image placeholders
Version 2.4.1+f2l1h
Copyright (c) 2014 Ivan Malopinsky - http://imsky.co
Site:     http://imsky.github.io/holder
Issues:   https://github.com/imsky/holder/issues
License:  http://opensource.org/licenses/MIT
*/

(function (onDomReady, document, undefined) {
  'use strict';

  // Polyfill for Object.keys for older browsers
  if (!Object.keys) {
    Object.keys = function (obj) {
      var keys = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          keys.push(key);
        }
      }
      return keys;
    };
  }

  // Polyfill for Array.prototype.forEach for older browsers
  if (!Array.prototype.forEach) {
    Array.prototype.forEach = function (callback, thisArg) {
      thisArg = thisArg || window;
      for (var i = 0; i < this.length; i++) {
        callback.call(thisArg, this[i], i, this);
      }
    };
  }

  // Polyfill for String.prototype.trim for older browsers
  if (!String.prototype.trim) {
    String.prototype.trim = function () {
      return this.replace(/^\s+|\s+$/g, '');
    };
  }

  // Polyfill for Function.prototype.bind for older browsers
  if (!Function.prototype.bind) {
    Function.prototype.bind = function (context) {
      var self = this;
      return function () {
        return self.apply(context, arguments);
      };
    };
  }

  // Check if the browser supports the 'input' event
  var supportsInputEvent = 'oninput' in document.createElement('input');

  // Check if the browser supports the 'transitionend' event
  var supportsTransitionEnd = function () {
    var el = document.createElement('div');
    var transitions = {
      'transition': 'transitionend',
      'OTransition': 'oTransitionEnd',
      'MozTransition': 'transitionend',
      'WebkitTransition': 'webkitTransitionEnd'
    };

    for (var transition in transitions) {
      if (el.style[transition] !== undefined) {
        return transitions[transition];
      }
    }

    return false;
  }();

  // Check if the browser supports the 'animationend' event
  var supportsAnimationEnd = function () {
    var el = document.createElement('div');
    var animations = {
      'animation': 'animationend',
      'OAnimation': 'oAnimationEnd',
      'MozAnimation': 'animationend',
      'WebkitAnimation': 'webkitAnimationEnd'
    };

    for (var animation in animations) {
      if (el.style[animation] !== undefined) {
        return animations[animation];
      }
    }

    return false;
  }();

  // Check if the browser supports the 'placeholder' attribute
  var supportsPlaceholder = function () {
    var input = document.createElement('input');
    return 'placeholder' in input;
  }();

  // Check if the browser supports the 'getComputedStyle' method
  var supportsGetComputedStyle = function () {
    return typeof document.defaultView.getComputedStyle === 'function';
  }();

  // Check if the browser supports the 'classList' property
  var supportsClassList = function () {
    return typeof document.createElement('div').classList === 'object';
  }();

  // Check if the browser supports the 'matchesSelector' method
  var supportsMatchesSelector = function () {
    var div = document.createElement('div');
    return div.webkitMatchesSelector || div.matchesSelector || div.mozMatchesSelector || div.msMatchesSelector || div.oMatchesSelector;
  }();

  // Check if the browser supports the 'querySelectorAll' method
  var supportsQuerySelectorAll = function () {
    return typeof document.querySelectorAll === 'function';
  }();

  // Check if the browser supports the 'addEventListener' method
  var supportsAddEventListener = function () {
    return typeof document.addEventListener === 'function';
  }();

  // Check if the browser supports the 'removeEventListener' method
  var supportsRemoveEventListener = function () {
    return typeof document.removeEventListener === 'function';
  }();

  // Check if the browser supports the 'attachEvent' method
  var supportsAttachEvent = function () {
    return typeof document.attachEvent === 'function';
  }();

  // Check if the browser supports the 'detachEvent' method
  var supportsDetachEvent = function () {
    return typeof document.detachEvent === 'function';
  }();

  // Check if the browser supports the 'devicePixelRatio' property
  var supportsDevicePixelRatio = function () {
    return typeof window.devicePixelRatio !== 'undefined';
  }();

  // Check if the browser supports the 'XMLSerializer' object
  var supportsXMLSerializer = function () {
    return typeof XMLSerializer !== 'undefined';
  }();

  // Check if the browser supports the 'DOMParser' object
  var supportsDOMParser = function () {
    return typeof DOMParser !== 'undefined';
  }();

  // Check if the browser supports the 'localStorage' object
  var supportsLocalStorage = function () {
    try {
      return 'localStorage' in window && window['localStorage'] !== null;
    } catch (e) {
      return false;
    }
  }();

  // Check if the browser supports the 'sessionStorage' object
  var supportsSessionStorage = function () {
    try {
      return 'sessionStorage' in window && window['sessionStorage'] !== null;
    } catch (e) {
      return false;
    }
  }();

  // Check if the browser supports the 'atob' method
  var supportsAtob = function () {
    return typeof atob === 'function';
  }();

  // Check if the browser supports
