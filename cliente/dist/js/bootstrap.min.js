/*!
 * Bootstrap v3.3.1 (http://getbootstrap.com)
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */

+function ($) {
    'use strict';

    // jQuery < 2.0.0
    if (typeof jQuery === 'undefined') {
        throw new Error('Bootstrap\'s JavaScript requires jQuery');
    }

    var version = '.3.3.1',
        jQueryversion = jQuery.fn.jquery.split(' ')[0].split('.');

    if ((jQueryversion[0] < 2 && jQueryversion[1] < 9) || (jQueryversion[0] == 1 && jQueryversion[1] == 9 && jQueryversion[2] < 1)) {
        throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher');
    }

    // COLLAPSE
    // =========

    +function ($) {
        'use strict';

        var Collapse = function (element, options) {
            this.$element = $(element);
            this.options = $.extend({}, Collapse.DEFAULTS, options);

            if (this.options.parent) {
                this.$parent = $(this.options.parent);
            }

            this.addAriaAndCollapsedClass(this.$element, this.$trigger);
            if (this.options.toggle) this.toggle();
        };

        Collapse.VERSION = version;

        Collapse.TRANSITION_DURATION = 350;

        Collapse.DEFAULTS = {
            toggle: true
        };

        Collapse.prototype.dimension = function () {
            var hasWidth = this.$element.hasClass('width');
            return hasWidth ? 'width' : 'height';
        };

        Collapse.prototype.show = function () {
            if (this.transitioning) return;
            var startEvent = $.Event('show.bs.collapse');
            this.$element.trigger(startEvent);
            if (startEvent.isDefaultPrevented()) return;
            var actives = this.$parent && this.$parent.find('> .panel > .in');
            if (actives && actives.length) {
                var hasData = actives.data('bs.collapse');
                if (hasData && hasData.transitioning) return;
                actives.collapse('hide');
                hasData || actives.data('bs.collapse', null);
            }
            var dimension = this.dimension();
            this.$element
                .removeClass('collapse')
                .addClass('collapsing')[dimension](0)
                .attr('aria-expanded', true);
            this.$trigger
                .removeClass('collapsed')
                .attr('aria-expanded', true);
            this.transitioning = 1;

            var complete = function () {
                this.$element
                    .removeClass('collapsing')
                    .addClass('collapse in')[dimension]('')
                    .trigger('shown.bs.collapse');
                this.transitioning = 0;
                this.$trigger.trigger('shown.bs.collapse');
            };
            if (!$.support.transition) return complete.call(this);
            var scrollSize = $.camelCase(['scroll', dimension].join('-'));
            this.$element
                .one('bsTransitionEnd', $.proxy(complete, this))
                .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize]);
        };

        Collapse.prototype.hide = function () {
            if (this.transitioning) return;
            var startEvent = $.Event('hide.bs.collapse');
            this.$element.trigger(startEvent);
            if (startEvent.isDefaultPrevented()) return;
            this.$element
                .removeClass('collapse in')
                .addClass('collapsing')[this.dimension](this.$element[0].scrollHeight)[0].offsetWidth;
            this.$trigger
                .addClass('collapsed')
                .attr('aria-expanded', false);
            this.transitioning = 1;

            var complete = function () {
                this.transitioning = 0;
                this.$element
                    .removeClass('collapsing')
                    .addClass('collapse')
                    .trigger('hidden.bs.collapse');
                this.$trigger.trigger('hidden.bs.collapse');
            };
            if (!$.support.transition) return complete.call(this);
            this.$element
                .one('bsTransitionEnd', $.proxy(complete, this))
                .emulateTransitionEnd(Collapse.TRANSITION_DURATION);
        };

        Collapse.prototype.toggle = function () {
            this[this.$element.hasClass('in') ? 'hide' : 'show']();
        };

        Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
            var isOpen = $element.hasClass('in');

            $trigger
                .toggleClass('collapsed', !isOpen)
                .attr('aria-expanded', isOpen);

            $element.toggleClass('collapse in')
                .attr('aria-expanded', isOpen);
        };

        // COLLAPSE PLUGIN DEFINITION
        // ==========================

        function Plugin(option) {
            return this.each(function () {
                var $this = $(this);
                var data = $this.data('bs.collapse');
                var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option);

                if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false;
                if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)));
                if (typeof option == 'string') data[option]();
            });
        }

        var old = $.
