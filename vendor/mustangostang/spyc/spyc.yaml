<?php
#
#    S P Y C
#      a simple php yaml class
#
# authors: [vlad andersen (vlad.andersen@gmail.com), chris wanstrath (chris@ozmm.org)]
# websites: [http://www.yaml.org, http://spyc.sourceforge.net/]
# license: [MIT License, http://www.opensource.org/licenses/mit-license.php]
# copyright: (c) 2005-2006 Chris Wanstrath, 2006-2011 Vlad Andersen
#

---

# Mappings - with proper types
String: Anyone's name, really.                  // A string value
Int: 13                                         // An integer value
True: true                                      // A boolean value: true
False: false                                     // A boolean value: false
Zero: 0                                          // An integer value: 0
Null: NULL                                      // A null value
NotNull: 'null'                                  // A string value: 'null'
NotTrue: 'y'                                     // A string value: 'y'
NotBoolTrue: 'true'                              // A string value: 'true'
NotInt: '5'                                      // A string value: '5'
Float: 5.34                                      // A float value: 5.34
Negative: -90                                    // A negative integer value: -90
SmallFloat: 0.7                                   // A float value: 0.7
NewLine: \n                                      // A newline character

# A sequence
- PHP Class                                     // An item in the sequence: 'PHP Class'
- Basic YAML Loader                              // An item in the sequence: 'Basic YAML Loader'
- Very Basic YAML Dumper                         // An item in the sequence: 'Very Basic YAML Dumper'

# A sequence of a sequence
-
  - YAML is so easy to learn.                    // An item in the sequence: 'YAML is so easy to learn.'
  - Your config files will never be the same.   // An item in the sequence: 'Your config files will never be the same.'

# A sequence of mappings
-
  cpu: 1.5ghz                                    // A mapping with a key 'cpu' and a value '1.5ghz'
  ram: 1 gig                                     // A mapping with a key 'ram' and a value '1 gig'
  os : os x 10.4.1                                // A mapping with a key 'os' and a value 'os x 10.4.1'

# Mapped sequence
domains:                                         // A key 'domains' mapped to a sequence
  - yaml.org                                      // An item in the sequence: 'yaml.org'
  - php.net                                       // An item in the sequence: 'php.net'

# A sequence like this.
- program: Adium                                 // A mapping with a key 'program' and a value 'Adium'
  platform: OS X                                  // A mapping with a key 'platform' and a value 'OS X'
  type: Chat Client                               // A mapping with a key 'type' and a value 'Chat Client'

# A folded block as a mapped value
no time: >                                       // A key 'no time' mapped to a folded block value
  There isn't any time
  for your tricks!

  Do you understand?                              // The folded block value

# A literal block as a mapped value
some time: |                                      // A key 'some time' mapped to a literal block value
  There is nothing but time
  for your tricks.

# Crazy combinations
databases:                                        // A key 'databases' mapped to a sequence
  - name: spartan                                 // An item in the sequence: a mapping with a key 'name' and a value 'spartan'
    notes:                                        // A value for the 'notes' key in the mapping
      - Needs to be backed up                      // An item in the sequence: 'Needs to be backed up'
      - Needs to be normalized                    // An item in the sequence: 'Needs to be normalized'
    type: mysql                                    // A value for the 'type' key in the mapping: 'mysql'

# You can be a bit tricky
"if: you'd": like                                 // A mapping with a key 'if: you'd' and a value 'like'

# Inline sequences
- [One, Two, Three, Four]                         // A sequence with inline values: ['One', 'Two', 'Three', 'Four']

# Nested Inline Sequences
- [One, [Two, And, Three], Four, Five]            // A sequence with nested inline sequences: ['One', ['Two', 'And', 'Three'], 'Four', 'Five']

# Nested Nested Inline Sequences
- [This, [Is, Getting, [Ridiculous, Guys]], Seriously, [Show, Mercy]] // A sequence with nested nested inline sequences

# Inline mappings
- {name: chris, age: young, brand: lucky strike}   // A sequence with inline mappings: [{'name': 'chris', 'age': 'young', 'brand': 'lucky strike'}]

# Nested inline mappings
- {name: mark, age: older than chris, brand: [marlboro, lucky strike]} // A sequence with nested inline mappings

# References -- they're shaky, but functional
dynamic languages: &DLANGS                       // A key 'dynamic languages' mapped to a sequence with a reference (&DLANGS)
  - Perl
  - Python
  - PHP
  - Ruby
compiled languages: &CLANGS                       // A key 'compiled languages' mapped to a sequence with a reference (&CLANGS)
  - C/C++
  - Java
all languages:

